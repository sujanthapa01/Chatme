{
  "version": 3,
  "sources": ["../../vite-plugin-env-compatible/node_modules/dotenv/lib/main.js", "../../dotenv-expand/lib/main.js", "../../vite-plugin-env-compatible/dist/index.mjs"],
  "sourcesContent": ["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n", "'use strict'\n\nvar dotenvExpand = function (config) {\n  // if ignoring process.env, use a blank object\n  var environment = config.ignoreProcessEnv ? {} : process.env\n\n  var interpolate = function (envValue) {\n    var matches = envValue.match(/(.?\\${?(?:[a-zA-Z0-9_]+)?}?)/g) || []\n\n    return matches.reduce(function (newEnv, match) {\n      var parts = /(.?)\\${?([a-zA-Z0-9_]+)?}?/g.exec(match)\n      var prefix = parts[1]\n\n      var value, replacePart\n\n      if (prefix === '\\\\') {\n        replacePart = parts[0]\n        value = replacePart.replace('\\\\$', '$')\n      } else {\n        var key = parts[2]\n        replacePart = parts[0].substring(prefix.length)\n        // process.env value 'wins' over .env file's value\n        value = environment.hasOwnProperty(key) ? environment[key] : (config.parsed[key] || '')\n\n        // Resolve recursive interpolations\n        value = interpolate(value)\n      }\n\n      return newEnv.replace(replacePart, value)\n    }, envValue)\n  }\n\n  for (var configKey in config.parsed) {\n    var value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey]\n\n    config.parsed[configKey] = interpolate(value)\n  }\n\n  for (var processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey]\n  }\n\n  return config\n}\n\nmodule.exports = dotenvExpand\n", "import f from\"path\";import m from\"fs\";import x from\"dotenv\";import E from\"dotenv-expand\";function u(i,e,n=!1){for(let p of e){let t=f.join(i,p);if(m.existsSync(t)&&m.statSync(t).isFile())return n?t:m.readFileSync(t,\"utf-8\")}let s=f.dirname(i);if(s!==i)return u(s,e,n)}function v(i){let{mode:e,envDir:n,prefix:s,ignoreProcessEnv:p}=i;if(e===\"local\")throw new Error('\"local\" cannot be used as a mode name because it conflicts with the .local postfix for .env files.');let t={},a=[`.env.${e}.local`,`.env.${e}`,\".env.local\",\".env\"];for(let o in process.env)o.startsWith(s)&&t[o]===void 0&&(t[o]=process.env[o]);for(let o of a){let l=u(n,[o],!0);if(l){let c=x.parse(m.readFileSync(l),{debug:!!process.env.DEBUG||void 0});E({parsed:c,ignoreProcessEnv:p});for(let[r,d]of Object.entries(c))r.startsWith(s)&&t[r]===void 0?t[r]=d:r===\"NODE_ENV\"&&(process.env.VITE_USER_NODE_ENV=d)}}return t}function g(i){let e={};return Object.keys(process.env).map(n=>{String(n).includes(i)&&(e[n]=process.env[n]||\"\")}),e}var b=\"vite-plugin-env-compatible\";import y from\"path\";function j(i={}){let e={mountedPath:\"process.env\",...i};return{name:b,enforce:\"pre\",config(n,{mode:s}){let p=n.root||process.cwd(),t=n.envDir||\"./\";y.isAbsolute(t||\"\")||(t=y.join(p,t));let a=typeof e.prefix>\"u\"?\"VUE_APP_\":e.prefix,o=v({mode:s,envDir:t,prefix:a,ignoreProcessEnv:e.ignoreProcessEnv??!1}),l=g(a),c={};e.mountedPath?.startsWith(\"process.env\")&&(c[\"process.env.VITE\"]=JSON.stringify(!0)),Object.keys({...o,...l}).map(r=>{let d=o[r];c[`${e.mountedPath}.${r}`]=JSON.stringify(d)}),n.define={...n.define||{},...c}}}}export{j as default};\n"],
  "mappings": ";;;;;;;;;;AAAA;AAAA;AAuBA,QAAM,KAAK;AACX,QAAM,OAAO;AAEb,aAAS,IAAK,SAAuB;AACnC,cAAQ,IAAI,mBAAmB,OAAO,EAAE;AAAA,IAC1C;AAEA,QAAM,UAAU;AAChB,QAAM,iBAAiB;AACvB,QAAM,cAAc;AACpB,QAAM,iBAAiB;AAGvB,aAAS,MAAO,KAA4B,SAA6D;AACvG,YAAM,QAAQ,QAAQ,WAAW,QAAQ,KAAK;AAC9C,YAAM,MAAM,CAAC;AAGb,UAAI,SAAS,EAAE,MAAM,cAAc,EAAE,QAAQ,SAAU,MAAM,KAAK;AAEhE,cAAM,cAAc,KAAK,MAAM,cAAc;AAE7C,YAAI,eAAe,MAAM;AACvB,gBAAM,MAAM,YAAY,CAAC;AAEzB,cAAI,MAAO,YAAY,CAAC,KAAK;AAC7B,gBAAM,MAAM,IAAI,SAAS;AACzB,gBAAM,iBAAiB,IAAI,CAAC,MAAM,OAAO,IAAI,GAAG,MAAM;AACtD,gBAAM,iBAAiB,IAAI,CAAC,MAAM,OAAO,IAAI,GAAG,MAAM;AAGtD,cAAI,kBAAkB,gBAAgB;AACpC,kBAAM,IAAI,UAAU,GAAG,GAAG;AAG1B,gBAAI,gBAAgB;AAClB,oBAAM,IAAI,QAAQ,aAAa,OAAO;AAAA,YACxC;AAAA,UACF,OAAO;AAEL,kBAAM,IAAI,KAAK;AAAA,UACjB;AAEA,cAAI,GAAG,IAAI;AAAA,QACb,WAAW,OAAO;AAChB,cAAI,iDAAiD,MAAM,CAAC,KAAK,IAAI,EAAE;AAAA,QACzE;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT;AAGA,aAAS,OAAQ,SAA+D;AAC9E,UAAI,aAAa,KAAK,QAAQ,QAAQ,IAAI,GAAG,MAAM;AACnD,UAAI,WAAyB;AAC7B,UAAI,QAAQ;AAEZ,UAAI,SAAS;AACX,YAAI,QAAQ,QAAQ,MAAM;AACxB,uBAAa,QAAQ;AAAA,QACvB;AACA,YAAI,QAAQ,YAAY,MAAM;AAC5B,qBAAW,QAAQ;AAAA,QACrB;AACA,YAAI,QAAQ,SAAS,MAAM;AACzB,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,UAAI;AAEF,cAAM,SAAS,MAAM,GAAG,aAAa,YAAY,EAAE,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC;AAEzE,eAAO,KAAK,MAAM,EAAE,QAAQ,SAAU,KAAK;AACzC,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,QAAQ,KAAK,GAAG,GAAG;AAC3D,oBAAQ,IAAI,GAAG,IAAI,OAAO,GAAG;AAAA,UAC/B,WAAW,OAAO;AAChB,gBAAI,IAAI,GAAG,qEAAqE;AAAA,UAClF;AAAA,QACF,CAAC;AAED,eAAO,EAAE,OAAO;AAAA,MAClB,SAAS,GAAG;AACV,eAAO,EAAE,OAAO,EAAE;AAAA,MACpB;AAAA,IACF;AAEA,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,QAAQ;AAAA;AAAA;;;AChHvB,IAAAA,gBAAA;AAAA;AAAA;AAEA,QAAI,eAAe,SAAU,QAAQ;AAEnC,UAAI,cAAc,OAAO,mBAAmB,CAAC,IAAI,QAAQ;AAEzD,UAAI,cAAc,SAAU,UAAU;AACpC,YAAI,UAAU,SAAS,MAAM,+BAA+B,KAAK,CAAC;AAElE,eAAO,QAAQ,OAAO,SAAU,QAAQ,OAAO;AAC7C,cAAI,QAAQ,8BAA8B,KAAK,KAAK;AACpD,cAAI,SAAS,MAAM,CAAC;AAEpB,cAAIC,QAAO;AAEX,cAAI,WAAW,MAAM;AACnB,0BAAc,MAAM,CAAC;AACrB,YAAAA,SAAQ,YAAY,QAAQ,OAAO,GAAG;AAAA,UACxC,OAAO;AACL,gBAAI,MAAM,MAAM,CAAC;AACjB,0BAAc,MAAM,CAAC,EAAE,UAAU,OAAO,MAAM;AAE9C,YAAAA,SAAQ,YAAY,eAAe,GAAG,IAAI,YAAY,GAAG,IAAK,OAAO,OAAO,GAAG,KAAK;AAGpF,YAAAA,SAAQ,YAAYA,MAAK;AAAA,UAC3B;AAEA,iBAAO,OAAO,QAAQ,aAAaA,MAAK;AAAA,QAC1C,GAAG,QAAQ;AAAA,MACb;AAEA,eAAS,aAAa,OAAO,QAAQ;AACnC,YAAI,QAAQ,YAAY,eAAe,SAAS,IAAI,YAAY,SAAS,IAAI,OAAO,OAAO,SAAS;AAEpG,eAAO,OAAO,SAAS,IAAI,YAAY,KAAK;AAAA,MAC9C;AAEA,eAAS,cAAc,OAAO,QAAQ;AACpC,oBAAY,UAAU,IAAI,OAAO,OAAO,UAAU;AAAA,MACpD;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC7CjB,kBAAa;AAAO,gBAAa;AAAK,oBAAa;AAAS,2BAAa;AAAg8B,IAAAC,eAAa;AAA77B,SAAS,EAAE,GAAE,GAAE,IAAE,OAAG;AAAC,WAAQ,KAAK,GAAE;AAAC,QAAI,IAAE,YAAAC,QAAE,KAAK,GAAE,CAAC;AAAE,QAAG,UAAAC,QAAE,WAAW,CAAC,KAAG,UAAAA,QAAE,SAAS,CAAC,EAAE,OAAO;AAAE,aAAO,IAAE,IAAE,UAAAA,QAAE,aAAa,GAAE,OAAO;AAAA,EAAC;AAAC,MAAI,IAAE,YAAAD,QAAE,QAAQ,CAAC;AAAE,MAAG,MAAI;AAAE,WAAO,EAAE,GAAE,GAAE,CAAC;AAAC;AAAC,SAAS,EAAE,GAAE;AAAC,MAAG,EAAC,MAAK,GAAE,QAAO,GAAE,QAAO,GAAE,kBAAiB,EAAC,IAAE;AAAE,MAAG,MAAI;AAAQ,UAAM,IAAI,MAAM,oGAAoG;AAAE,MAAI,IAAE,CAAC,GAAE,IAAE,CAAC,QAAQ,CAAC,UAAS,QAAQ,CAAC,IAAG,cAAa,MAAM;AAAE,WAAQ,KAAK,QAAQ;AAAI,MAAE,WAAW,CAAC,KAAG,EAAE,CAAC,MAAI,WAAS,EAAE,CAAC,IAAE,QAAQ,IAAI,CAAC;AAAG,WAAQ,KAAK,GAAE;AAAC,QAAI,IAAE,EAAE,GAAE,CAAC,CAAC,GAAE,IAAE;AAAE,QAAG,GAAE;AAAC,UAAI,IAAE,cAAAE,QAAE,MAAM,UAAAD,QAAE,aAAa,CAAC,GAAE,EAAC,OAAM,CAAC,CAAC,QAAQ,IAAI,SAAO,OAAM,CAAC;AAAE,+BAAAE,SAAE,EAAC,QAAO,GAAE,kBAAiB,EAAC,CAAC;AAAE,eAAO,CAAC,GAAE,CAAC,KAAI,OAAO,QAAQ,CAAC;AAAE,UAAE,WAAW,CAAC,KAAG,EAAE,CAAC,MAAI,SAAO,EAAE,CAAC,IAAE,IAAE,MAAI,eAAa,QAAQ,IAAI,qBAAmB;AAAA,IAAE;AAAA,EAAC;AAAC,SAAO;AAAC;AAAC,SAAS,EAAE,GAAE;AAAC,MAAI,IAAE,CAAC;AAAE,SAAO,OAAO,KAAK,QAAQ,GAAG,EAAE,IAAI,OAAG;AAAC,WAAO,CAAC,EAAE,SAAS,CAAC,MAAI,EAAE,CAAC,IAAE,QAAQ,IAAI,CAAC,KAAG;AAAA,EAAG,CAAC,GAAE;AAAC;AAAC,IAAI,IAAE;AAAiD,SAAS,EAAE,IAAE,CAAC,GAAE;AAAC,MAAI,IAAE,EAAC,aAAY,eAAc,GAAG,EAAC;AAAE,SAAM,EAAC,MAAK,GAAE,SAAQ,OAAM,OAAO,GAAE,EAAC,MAAK,EAAC,GAAE;AAAnoC;AAAooC,QAAI,IAAE,EAAE,QAAM,QAAQ,IAAI,GAAE,IAAE,EAAE,UAAQ;AAAK,iBAAAC,QAAE,WAAW,KAAG,EAAE,MAAI,IAAE,aAAAA,QAAE,KAAK,GAAE,CAAC;AAAG,QAAI,IAAE,OAAO,EAAE,SAAO,MAAI,aAAW,EAAE,QAAO,IAAE,EAAE,EAAC,MAAK,GAAE,QAAO,GAAE,QAAO,GAAE,kBAAiB,EAAE,oBAAkB,MAAE,CAAC,GAAE,IAAE,EAAE,CAAC,GAAE,IAAE,CAAC;AAAE,aAAE,gBAAF,mBAAe,WAAW,oBAAiB,EAAE,kBAAkB,IAAE,KAAK,UAAU,IAAE,IAAG,OAAO,KAAK,EAAC,GAAG,GAAE,GAAG,EAAC,CAAC,EAAE,IAAI,OAAG;AAAC,UAAI,IAAE,EAAE,CAAC;AAAE,QAAE,GAAG,EAAE,WAAW,IAAI,CAAC,EAAE,IAAE,KAAK,UAAU,CAAC;AAAA,IAAC,CAAC,GAAE,EAAE,SAAO,EAAC,GAAG,EAAE,UAAQ,CAAC,GAAE,GAAG,EAAC;AAAA,EAAC,EAAC;AAAC;",
  "names": ["require_main", "value", "import_path", "f", "m", "x", "E", "y"]
}
